#!/usr/bin/python
# -*- coding: utf-8 -*-
import os, sys, codecs
import sqlite3
from optparse import OptionParser, OptionValueError
from datetime import datetime
from time import strptime
sys.stdout = codecs.lookup('utf_8')[-1](sys.stdout) # to fix EncodeError.

usage = u'usage: %prog [options] year month'
parser = OptionParser(usage)
parser.add_option(
    "-v", "--verbose",
    action='store_true',
)
BASEDIR = os.path.dirname(os.path.abspath(__file__))
WEEK = [u'月', u'火', u'水', u'木', u'金', u'土', u'日']

def query(year, month):
    conn = sqlite3.connect(BASEDIR + '/atnd.db')
    c = conn.cursor()
    sql = u"""
select msg, datetime(created_at, 'localtime') from logs
where created_at between julianday('%04d-%02d-01 00:00:00') 
and julianday('%04d-%02d-01 00:00:00')
order by created_at asc
""" % (year, month, year, month + 1)

    c.execute(sql)
    records = []
    for row in c: # rowはtuple
        records.append({'msg': row[0], 'created_at': row[1]})
    conn.close()
    return records

def display(year, month, records):
    day = 0
    for r in records:
        dt = datetime(*strptime(r['created_at'], u'%Y-%m-%d %H:%M:%S')[0:6])
        if day != dt.day:
            print u'\n= %d-%d-%d(%s) =\n' % (dt.year, dt.month, dt.day, WEEK[dt.weekday()])
        day = dt.day

        print u' %02d:%02d | %s' % (dt.hour, dt.minute, r['msg'])

if __name__ == '__main__':
    (options, args) = parser.parse_args()

    if len(args) != 2:
        sys.exit(u'ERROR: arguments must be 2.\n ' + usage)
    (year, month) = map(lambda x: int(x), args[0:2])
    if year < 2010:
        sys.exit(u'ERROR: year must be valid.\n ' + usage)
    if not month in range(1, 13):
        sys.exit(u'ERROR: month must be valid.\n ' + usage)

    display(year, month, query(year, month))

# vim: set ts=4 sw=4 sts=4 expandtab fenc=utf-8: */
